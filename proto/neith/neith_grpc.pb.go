// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/neith/neith.proto

package neith

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NeithService_HealthCheck_FullMethodName = "/neith.NeithService/HealthCheck"
)

// NeithServiceClient is the client API for NeithService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeithServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type neithServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNeithServiceClient(cc grpc.ClientConnInterface) NeithServiceClient {
	return &neithServiceClient{cc}
}

func (c *neithServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, NeithService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeithServiceServer is the server API for NeithService service.
// All implementations must embed UnimplementedNeithServiceServer
// for forward compatibility
type NeithServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedNeithServiceServer()
}

// UnimplementedNeithServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNeithServiceServer struct {
}

func (UnimplementedNeithServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedNeithServiceServer) mustEmbedUnimplementedNeithServiceServer() {}

// UnsafeNeithServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeithServiceServer will
// result in compilation errors.
type UnsafeNeithServiceServer interface {
	mustEmbedUnimplementedNeithServiceServer()
}

func RegisterNeithServiceServer(s grpc.ServiceRegistrar, srv NeithServiceServer) {
	s.RegisterService(&NeithService_ServiceDesc, srv)
}

func _NeithService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeithServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeithService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeithServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NeithService_ServiceDesc is the grpc.ServiceDesc for NeithService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NeithService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neith.NeithService",
	HandlerType: (*NeithServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _NeithService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/neith/neith.proto",
}
